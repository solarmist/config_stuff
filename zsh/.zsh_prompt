# {{{ ZSH prompt setup

# Include zsh-git-prompt
source ~/bin/zsh-git-prompt/zshrc.sh


# Prompt requirements
setopt extended_glob prompt_subst
autoload colors zsh/terminfo

# vcs_info
autoload -Uz vcs_info
zstyle ':vcs_info:*' stagedstr '%F{28}‚óè'
zstyle ':vcs_info:*' unstagedstr '%F{11}‚óè'
zstyle ':vcs_info:*' check-for-changes true
zstyle ':vcs_info:[svn]' formats '[%b%c%u]'
zstyle ':vcs_info:*' enable hg git svn


# {{{ Terminal and prompt

function venv_prompt {
    mp_name=""
    app_name=""
    VENV_COLOR=$PR_LIGHT_BLUE
    if [ -n "${MP_NAME}" ]; then
	mp_name="$VENV_COLOR${MP_NAME}"
	if [ -n "${APP_NAME}" ]; then
	    app_name="$PR_WHITE:$VENV_COLOR${APP_NAME}"
	fi
	output="$mp_name$app_name"
    elif [ -n "${VIRTUAL_ENV}" ]; then
	output="$VENV_COLOR${VIRTUAL_ENV}"
    fi

    if [ -n "$output" ]; then
	echo "${PR_YELLOW}[${PR_LIGHT_GREEN}Venv${PR_WHITE}:$output$PR_YELLOW]"
    fi
}

function chpwd {
    # -P prompt expansion
    print -Pn "\e]2;%n@%m: %c\a"
}

function precmd {
    # Terminal width = width - 1 (for lineup)
    local TERMWIDTH
    ((TERMWIDTH=${COLUMNS} - 1))

    # Truncate long paths
    PR_FILLBAR=""
    PR_PWDLEN=""
    local PROMPTSIZE="${#${(%):---(%n@%m:%T)---()--}}"
    local PWDSIZE="${#${(%):-%~}}"
    if [[ "${PROMPTSIZE} + ${PWDSIZE}" -gt ${TERMWIDTH} ]]; then
	((PR_PWDLEN=${TERMWIDTH} - ${PROMPTSIZE}))
    else
	PR_FILLBAR="\${(l.((${TERMWIDTH} - (${PROMPTSIZE} + ${PWDSIZE})))..${PR_HBAR}.)}"
    fi

    # VCS
    if [[ -z $(git ls-files --other --exclude-standard 2> /dev/null)
	    && -z $(bzr ls -R --unknown 2> /dev/null) ]]; then
	if [[ -z $(bzr st -V 2> /dev/null) ]]; then
	    zstyle ':vcs_info:*' formats '%F{yellow}(%F{green}%s%F{white}:%F{blue}%b%c%u%F{yellow})'
	else
	    zstyle ':vcs_info:*' formats '%F{yellow}(%F{green}%s%F{white}:%F{blue}%b%c%u%F{28}‚óè%F{yellow})'
	fi
    else
	if [[ -z $(bzr st -V 2> /dev/null) ]]; then
	    zstyle ':vcs_info:*' formats '%F{yellow}(%F{green}%s%F{white}:%F{blue}%b%c%u%F{red}‚óè%F{yellow})'
	else
	    zstyle ':vcs_info:*' formats '%F{yellow}(%F{green}%s%F{white}:%F{blue}%b%c%u%F{red}‚óè%F{28}‚óè%F{yellow})'
	fi
    fi
    vcs_info
}

function preexec {
    # Screen window titles as currently running programs
    if [[ "${TERM}" == "screen-256color" ]]; then
	# TODO: Descipher this
	local CMD="${1[(wr)^(*=*|sudo|-*)]}"
	echo -n "\ek$CMD\e\\"
    fi
}

function setprompt {
    if [[ "${terminfo[colors]}" -ge 8 ]]; then
	colors
    fi
    PR_NO_COLOUR="%{${terminfo[sgr0]}%}"
    for color in RED GREEN YELLOW BLUE MAGENTA CYAN WHITE; do
	eval PR_"${color}"="%{${terminfo[bold]}$fg[${(L)color}]%}"
	eval PR_LIGHT_"${color}"="%{$fg[${(L)color}]%}"
    done
    LINE_COLOR="$PR_YELLOW"

    # Try to use extended characters to look nicer
    # typeset = declare  (A very weak form of typing)
    typeset -A altchar  # altchar is an array
    # TermInfo database
    # http://pubs.opengroup.org/onlinepubs/7908799/xcurses/terminfo.html
    # NCURSES Extended Characters Quick Reference Charts and Screen Layout Chart
    # http://melvilletheatre.com/articles/ncurses-extended-characters/index.html
    set -A altchar ${(s..)terminfo[acsc]}  # Graphic acs_chars charset pairs aAbBcC
    # The () is a specifying a parameter flag
    # Guess: (s..) s is to force field splitting on . and .
    # My guess is that gets the next two characters and sets them as the key:value pair
    # in a hash map from a-z to the alternative character set

    PR_SET_CHARSET="%{${terminfo[enacs]}%}"  # Enable alternate character set
    PR_SHIFT_IN="%{${terminfo[smacs]}%}"  # Start alternate character set
    PR_SHIFT_OUT="%{${terminfo[rmacs]}%}" # End alternate character set
    PR_HBAR="${altchar[q]:--}"  # ‚îÄ
    PR_ULCORNER="${altchar[l]:--}" # ‚îå
    PR_LLCORNER="${altchar[m]:--}" # ‚îî
    PR_LRCORNER="${altchar[j]:--}" # ‚îê
    PR_URCORNER="${altchar[k]:--}" # ‚îò
    ME_EMOJI=(üê∂ üê± üê≠ üêπ üê∞ ü¶ä üêª üêº üê® üêØ ü¶Å üêÆ üê∑ üê∏ üêµ üêô)
    function RANDOM_ME_EMOJI {
	echo "${ME_EMOJI[$((RANDOM%14))]}"
    }

    function disable_altcharset {
	local string="$1"
	echo "$PR_SHIFT_OUT${string}$PR_SHIFT_IN$LINE_COLOR"
    }

    # https://www-s.acm.illinois.edu/workshops/zsh/prompt/formatting.html
    # Terminal prompt settings
    case "${TERM}" in
	dumb) # Simple prompt for dumb terminals
	    unsetopt zle
	    PROMPT='%n@%m:%~%% '
	    ;;
	linux) # Simple prompt with Zenburn colors for the console
	    echo -en "\e]P01e2320" # zenburn black (normal black)
	    echo -en "\e]P8709080" # bright-black  (darkgrey)
	    echo -en "\e]P1705050" # red           (darkred)
	    echo -en "\e]P9dca3a3" # bright-red    (red)
	    echo -en "\e]P260b48a" # green         (darkgreen)
	    echo -en "\e]PAc3bf9f" # bright-green  (green)
	    echo -en "\e]P3dfaf8f" # yellow        (brown)
	    echo -en "\e]PBf0dfaf" # bright-yellow (yellow)
	    echo -en "\e]P4506070" # blue          (darkblue)
	    echo -en "\e]PC94bff3" # bright-blue   (blue)
	    echo -en "\e]P5dc8cc3" # purple        (darkmagenta)
	    echo -en "\e]PDec93d3" # bright-purple (magenta)
	    echo -en "\e]P68cd0d3" # cyan          (darkcyan)
	    echo -en "\e]PE93e0e3" # bright-cyan   (cyan)
	    echo -en "\e]P7dcdccc" # white         (lightgrey)
	    echo -en "\e]PFffffff" # bright-white  (white)
	    PROMPT='$LINE_COLOR%n@%m$PR_WHITE:$PR_GREEN%l$PR_WHITE:$PR_RED%~\
$PR_GREEN%%$PR_NO_COLOUR '
	    ;;
	*)  # Main prompt
	    # TODO: Figure out how to get zsh to recognize the width of my Rprompt
	    ZSH_THEME_GIT_PROMPT_AHEAD="%{‚¨ÜÔ∏è%G%}"
	    ZSH_THEME_GIT_PROMPT_BEHIND="%{‚¨áÔ∏è%G%}"
	    ZSH_THEME_GIT_PROMPT_BRANCH="%{$PR_MAGENTA%}"
	    ZSH_THEME_GIT_PROMPT_CHANGED="%{$PR_BLUE%}%{üë∑üèª‚Äç‚ôÄÔ∏è%G%}"
	    ZSH_THEME_GIT_PROMPT_CLEAN="%{$PR_GREEN%}%{‚úÖ %G%}"
	    ZSH_THEME_GIT_PROMPT_CONFLICTS="%{$PR_RED%}%{üôÖüèº‚Äç‚ôÄÔ∏è%G%}"
	    ZSH_THEME_GIT_PROMPT_PREFIX="$PR_YELLOW("
	    ZSH_THEME_GIT_PROMPT_SEPARATOR="$PR_WHITE‚éÆ"
	    ZSH_THEME_GIT_PROMPT_STAGED="%{$PR_RED%}%{üì® %G%}"
	    ZSH_THEME_GIT_PROMPT_SUFFIX="$PR_YELLOW)"
	    ZSH_THEME_GIT_PROMPT_UNTRACKED="%{üåå%G%}"

	    UL_CORNER='$PR_ULCORNER$PR_HBAR(' # ‚îå‚îÄ(
	    LL_CORNER='$PR_LLCORNER$LINE_COLOR$PR_HBAR(' # ‚îî‚îÄ(
	    UR_CORNER=')$PR_HBAR$PR_URCORNER' # )‚îÄ‚îê
	    LR_CORNER='$PR_HBAR$PR_LRCORNER' # ‚îÄ‚îò
	    HBAR=')$PR_HBAR$PR_HBAR${(e)PR_FILLBAR}$PR_HBAR(' # )‚îÄ...‚îÄ(

	    # http://zsh.sourceforge.net/Doc/Release/Prompt-Expansion.html
	    # %(x.true-text.false-text)
	    # x =
	    # ! - True if the shell is running with privileges
	    # # - True if the effective uid of the current process is n
	    # ? - True if the exit status of the last command was n.
	    # %S...%s - ... is standout text
	    UL_PROMPT='%(!.%SROOT%s.%n)$PR_WHITE@$PR_BLUE%m$PR_WHITE:$PR_GREEN%T' # {username/ROOT}@{short hostname}:{24 hour time}
	    UR_PROMPT='$PR_RED%$PR_PWDLEN<...<%~%<<'  # {short pwd}
	    L_PROMPT="%(?.$(RANDOM_ME_EMOJI).$PR_RED%?$PR_WHITE:)%(!.$PR_RED.$PR_GREEN)%#" # [cmd error code:]{% or #}
	    R_PROMPT='$(venv_prompt) $(git_super_status)'
	    PROMPT="$PR_SET_CHARSET$PR_SHIFT_IN$LINE_COLOR${UL_CORNER}$(disable_altcharset ${UL_PROMPT})${HBAR}$(disable_altcharset ${UR_PROMPT})${UR_CORNER}
${LL_CORNER}$(disable_altcharset ${L_PROMPT}))$PR_SHIFT_OUT$PR_NO_COLOUR "

	    RPROMPT="$PR_SET_CHARSET$PR_SHIFT_IN $LINE_COLOR$(disable_altcharset "${R_PROMPT}")${LR_CORNER}$PR_SHIFT_OUT$PR_NO_COLOUR"
	    ;;
    esac
}
